// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/transavro/transavro.proto

package cloudwalker_srv_transavro

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Transavro service

type TransavroService interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Transavro_StreamService, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (Transavro_PingPongService, error)
	GetTiles(ctx context.Context, in *RequestSpecification, opts ...client.CallOption) (Transavro_GetTilesService, error)
}

type transavroService struct {
	c    client.Client
	name string
}

func NewTransavroService(name string, c client.Client) TransavroService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "cloudwalker.srv.transavro"
	}
	return &transavroService{
		c:    c,
		name: name,
	}
}

func (c *transavroService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Transavro.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transavroService) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (Transavro_StreamService, error) {
	req := c.c.NewRequest(c.name, "Transavro.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &transavroServiceStream{stream}, nil
}

type Transavro_StreamService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type transavroServiceStream struct {
	stream client.Stream
}

func (x *transavroServiceStream) Close() error {
	return x.stream.Close()
}

func (x *transavroServiceStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *transavroServiceStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *transavroServiceStream) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transavroService) PingPong(ctx context.Context, opts ...client.CallOption) (Transavro_PingPongService, error) {
	req := c.c.NewRequest(c.name, "Transavro.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &transavroServicePingPong{stream}, nil
}

type Transavro_PingPongService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type transavroServicePingPong struct {
	stream client.Stream
}

func (x *transavroServicePingPong) Close() error {
	return x.stream.Close()
}

func (x *transavroServicePingPong) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *transavroServicePingPong) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *transavroServicePingPong) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *transavroServicePingPong) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transavroService) GetTiles(ctx context.Context, in *RequestSpecification, opts ...client.CallOption) (Transavro_GetTilesService, error) {
	req := c.c.NewRequest(c.name, "Transavro.GetTiles", &RequestSpecification{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &transavroServiceGetTiles{stream}, nil
}

type Transavro_GetTilesService interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*MovieTiles, error)
}

type transavroServiceGetTiles struct {
	stream client.Stream
}

func (x *transavroServiceGetTiles) Close() error {
	return x.stream.Close()
}

func (x *transavroServiceGetTiles) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *transavroServiceGetTiles) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *transavroServiceGetTiles) Recv() (*MovieTiles, error) {
	m := new(MovieTiles)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Transavro service

type TransavroHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, Transavro_StreamStream) error
	PingPong(context.Context, Transavro_PingPongStream) error
	GetTiles(context.Context, *RequestSpecification, Transavro_GetTilesStream) error
}

func RegisterTransavroHandler(s server.Server, hdlr TransavroHandler, opts ...server.HandlerOption) error {
	type transavro interface {
		Call(ctx context.Context, in *Request, out *Response) error
		Stream(ctx context.Context, stream server.Stream) error
		PingPong(ctx context.Context, stream server.Stream) error
		GetTiles(ctx context.Context, stream server.Stream) error
	}
	type Transavro struct {
		transavro
	}
	h := &transavroHandler{hdlr}
	return s.Handle(s.NewHandler(&Transavro{h}, opts...))
}

type transavroHandler struct {
	TransavroHandler
}

func (h *transavroHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.TransavroHandler.Call(ctx, in, out)
}

func (h *transavroHandler) Stream(ctx context.Context, stream server.Stream) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TransavroHandler.Stream(ctx, m, &transavroStreamStream{stream})
}

type Transavro_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type transavroStreamStream struct {
	stream server.Stream
}

func (x *transavroStreamStream) Close() error {
	return x.stream.Close()
}

func (x *transavroStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *transavroStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *transavroStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *transavroHandler) PingPong(ctx context.Context, stream server.Stream) error {
	return h.TransavroHandler.PingPong(ctx, &transavroPingPongStream{stream})
}

type Transavro_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type transavroPingPongStream struct {
	stream server.Stream
}

func (x *transavroPingPongStream) Close() error {
	return x.stream.Close()
}

func (x *transavroPingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *transavroPingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *transavroPingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *transavroPingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *transavroHandler) GetTiles(ctx context.Context, stream server.Stream) error {
	m := new(RequestSpecification)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.TransavroHandler.GetTiles(ctx, m, &transavroGetTilesStream{stream})
}

type Transavro_GetTilesStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*MovieTiles) error
}

type transavroGetTilesStream struct {
	stream server.Stream
}

func (x *transavroGetTilesStream) Close() error {
	return x.stream.Close()
}

func (x *transavroGetTilesStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *transavroGetTilesStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *transavroGetTilesStream) Send(m *MovieTiles) error {
	return x.stream.Send(m)
}
